# mock_cleaner.py

import sys
import os
import pandas as pd
from openpyxl.utils import get_column_letter


AUTO_CODE_START = 90000000  # Base for autogenerated codes

# ----------------------------------------
# Step 1: Clean 'Statements' tab
# ----------------------------------------
def clean_mock_statements(file_path, tab_name="Statements"):
    df = pd.read_excel(file_path, sheet_name=tab_name)
    df.columns = df.columns.str.strip()

    # Convert date and price
    df['date'] = pd.to_datetime(df['date'], dayfirst=True, errors='coerce')
    df['price'] = df['price'].replace('[£,]', '', regex=True).astype(float)

    # Drop invalid rows
    df = df.dropna(subset=['name', 'date', 'quantity', 'price'])

    # Normalize state
    df['state'] = df['state'].str.upper().str.strip()

    # Remove irrelevant/cancelled entries
    exclude_states = ['SELLING', 'BUYING', 'CANCELLED_BUY', 'CANCELLED_SELL']
    df = df[~df['state'].isin(exclude_states)]

    # Standardize item names
    df['name_clean'] = df['name'].str.strip().str.lower()
    df['total_value'] = df['price'] * df['quantity']

    # Drop original 'name' column
    df = df.drop(columns=['name'])

    print(f"✅ Cleaned {len(df)} rows from '{tab_name}' tab")
    return df

# ----------------------------------------
# Step 2: Save cleaned data with readable columns
# ----------------------------------------
def save_cleaned(df, output_path="mock_cleaned.xlsx"):
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name="Cleaned")
        worksheet = writer.sheets["Cleaned"]
        for i, col in enumerate(df.columns, 1):
            max_len = max(df[col].astype(str).map(len).max(), len(col)) + 2
            worksheet.column_dimensions[get_column_letter(i)].width = max_len

    print(f"✅ Cleaned mock statements saved to {output_path}")

# ----------------------------------------
# Step 3: Create or update a stable lookup
# ----------------------------------------
def create_mock_lookup(df, lookup_path="mock_lookup.xlsx"):
    """
    Builds/updates a stable lookup table for mock items.
    Auto-generates numeric codes if missing.
    """
    if os.path.exists(lookup_path):
        lookup_df = pd.read_excel(lookup_path, dtype={"productCode": "Int64"})
    else:
        lookup_df = pd.DataFrame(columns=["name_clean", "productCode"])

    updated_records = []

    for _, row in df.iterrows():
        name_clean = str(row["name_clean"]).strip()

        # Check for existing code
        match = lookup_df[lookup_df["name_clean"] == name_clean]
        if not match.empty:
            code = int(match["productCode"].iloc[0])
        else:
            # Generate new code
            code = AUTO_CODE_START + (abs(hash(name_clean)) % 10000000)
            updated_records.append({
                "name_clean": name_clean,
                "productCode": code
            })

        # Add code to df
        df.loc[row.name, "productCode"] = code

    # Merge new records into lookup
    if updated_records:
        lookup_df = pd.concat([lookup_df, pd.DataFrame(updated_records)], ignore_index=True)

    # Remove duplicates and sort
    lookup_df = lookup_df.drop_duplicates(subset=["name_clean", "productCode"])
    lookup_df = lookup_df.sort_values("name_clean").reset_index(drop=True)

    # Save lookup
    with pd.ExcelWriter(lookup_path, engine='openpyxl') as writer:
        lookup_df.to_excel(writer, index=False, sheet_name="Lookup")
        worksheet = writer.sheets["Lookup"]
        for i, col in enumerate(lookup_df.columns, 1):
            max_len = max(lookup_df[col].astype(str).map(len).max(), len(col)) + 2
            worksheet.column_dimensions[get_column_letter(i)].width = max_len

    print(f"✅ Lookup table updated at {lookup_path}")
    return df, lookup_df
